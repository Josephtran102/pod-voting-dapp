// app/page.tsx
'use client'
import { useState, useEffect } from 'react'
import { useContract } from '../hooks/useContract'
import { VOTING_ADDRESS } from '../constants/contract'

export default function VotingDapp() {
  const { proposals, createProposal, vote, loading, connectWallet, connected, refreshProposals } = useContract()
  const [description, setDescription] = useState('')
  const [duration, setDuration] = useState('3600')
  const [txPending, setTxPending] = useState(false)
  const [showSuccess, setShowSuccess] = useState(false)
  const [successMessage, setSuccessMessage] = useState('')
  const [walletAddress, setWalletAddress] = useState('')

  // Get wallet address
  useEffect(() => {
    if (connected && window.ethereum) {
      window.ethereum.request({ method: 'eth_accounts' })
        .then((accounts: string[]) => {
          if (accounts[0]) setWalletAddress(accounts[0])
        })
    }
  }, [connected])

  // Auto refresh
  useEffect(() => {
    const interval = setInterval(() => {
      if (connected) refreshProposals()
    }, 10000)
    return () => clearInterval(interval)
  }, [connected, refreshProposals])

  const handleCreateProposal = async (e: React.FormEvent) => {
    e.preventDefault()
    if (!description.trim()) return
    
    setTxPending(true)
    try {
      await createProposal(description, parseInt(duration))
      setDescription('')
      showSuccessNotification('Proposal created successfully! 🎉')
    } catch {
      // Error handled in hook
    } finally {
      setTxPending(false)
    }
  }

  const handleVote = async (proposalId: number) => {
    setTxPending(true)
    try {
      await vote(proposalId)
      showSuccessNotification('Vote submitted successfully! ✅')
    } catch {
      // Error handled in hook
    } finally {
      setTxPending(false)
    }
  }

  const showSuccessNotification = (message: string) => {
    setSuccessMessage(message)
    setShowSuccess(true)
    setTimeout(() => setShowSuccess(false), 3000)
  }

  const disconnectWallet = () => {
    setWalletAddress('')
    window.location.reload()
  }

  const formatTimeRemaining = (endTime: number) => {
    const now = Date.now() / 1000
    const remaining = endTime - now
    
    if (remaining <= 0) return 'Ended'
    
    const days = Math.floor(remaining / 86400)
    const hours = Math.floor((remaining % 86400) / 3600)
    const minutes = Math.floor((remaining % 3600) / 60)
    
    if (days > 0) return `${days}d ${hours}h remaining`
    if (hours > 0) return `${hours}h ${minutes}m remaining`
    return `${minutes}m remaining`
  }

  const formatAddress = (address: string) => {
    return `${address.slice(0, 6)}...${address.slice(-4)}`
  }

  return (
    <div className="min-h-screen bg-[#0a0a0a]">
      {/* Success Notification */}
      {showSuccess && (
        <div className="fixed top-20 right-4 z-50 bg-[#00ff88] text-[#0a0a0a] px-6 py-3 rounded-lg shadow-lg animate-slide-in">
          <p className="font-medium">{successMessage}</p>
        </div>
      )}
  
      {/* Header */}
      <header className="bg-[#1a1a1a] border-b border-[#333333] sticky top-0 z-40">
        <div className="container max-w-7xl mx-auto px-6">
          <div className="flex items-center justify-between h-16">
            <div className="flex items-center gap-3">
              <div className="w-10 h-10 bg-[#00ff88] rounded-lg flex items-center justify-center">
                <span className="text-[#0a0a0a] font-bold text-lg">P</span>
              </div>
              <div>
                <h1 className="text-xl font-bold text-[#00ff88]">Pod Voting dApp</h1>
                <p className="text-[#a0a0a0] text-xs">Decentralized governance on Pod Network</p>
              </div>
            </div>
            
            <div className="flex items-center gap-3">
              <div className="hidden sm:flex items-center gap-2 px-3 py-1.5 bg-[#252525] rounded-lg border border-[#333333]">
                <div className="status-dot"></div>
                <span className="text-xs">Pod DevNet</span>
              </div>
              
              {!connected ? (
                <button 
                  onClick={connectWallet}
                  className="bg-[#00ff88] hover:bg-[#00cc6a] text-[#0a0a0a] font-semibold py-2 px-4 rounded-lg transition-all text-sm"
                >
                  Connect Wallet
                </button>
              ) : (
                <div className="flex items-center gap-2">
                  <div className="px-3 py-1.5 bg-[#252525] rounded-lg border border-[#333333]">
                    <span className="text-xs text-[#00ff88] font-mono">
                      {formatAddress(walletAddress)}
                    </span>
                  </div>
                  <button 
                    onClick={disconnectWallet}
                    className="text-[#a0a0a0] hover:text-[#ff4444] transition-colors p-1.5"
                    title="Disconnect"
                  >
                    <svg className="w-4 h-4" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                      <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M17 16l4-4m0 0l-4-4m4 4H7m6 4v1a3 3 0 01-3 3H6a3 3 0 01-3-3V7a3 3 0 013-3h4a3 3 0 013 3v1" />
                    </svg>
                  </button>
                </div>
              )}
            </div>
          </div>
        </div>
      </header>
  
      {/* Main Content */}
      <main className="container max-w-7xl mx-auto px-6 py-8">
        {/* Contract Info */}
        <div className="text-center mb-6">
          <div className="inline-flex items-center gap-2 px-3 py-1.5 bg-[#252525] rounded-full border border-[#333333] text-xs">
            <span className="text-[#a0a0a0]">Contract:</span>
            <code className="text-[#00ff88] font-mono">
              {VOTING_ADDRESS.slice(0,6)}...{VOTING_ADDRESS.slice(-4)}
            </code>
            <button 
              onClick={() => {
                navigator.clipboard.writeText(VOTING_ADDRESS)
                showSuccessNotification('Contract address copied!')
              }}
              className="text-[#a0a0a0] hover:text-[#00ff88] transition-colors"
            >
              📋
            </button>
          </div>
        </div>
  
        {connected ? (
          <div className="grid lg:grid-cols-3 gap-6">
            {/* Create Proposal Card */}
            <div className="lg:col-span-1">
              <div className="bg-[#252525] border border-[#333333] rounded-xl p-5">
                <h2 className="text-lg font-bold mb-4 flex items-center gap-2">
                  <span className="text-[#00ff88]">+</span> Create Proposal
                </h2>
                
                <form onSubmit={handleCreateProposal} className="space-y-4">
                  <div>
                    <label className="block text-xs text-[#a0a0a0] mb-1.5">
                      Proposal Description
                    </label>
                    <textarea
                      value={description}
                      onChange={(e) => setDescription(e.target.value)}
                      placeholder="What should we vote on?"
                      className="w-full px-3 py-2 bg-[#1a1a1a] border border-[#333333] rounded-lg focus:border-[#00ff88] focus:outline-none transition-colors resize-none text-sm text-white placeholder-[#666666]"
                      rows={3}
                      required
                      disabled={txPending}
                    />
                  </div>
                  
                  <div>
                    <label className="block text-xs text-[#a0a0a0] mb-1.5">
                      Voting Duration
                    </label>
                    <select 
                      value={duration} 
                      onChange={(e) => setDuration(e.target.value)}
                      className="w-full px-3 py-2 bg-[#1a1a1a] border border-[#333333] rounded-lg focus:border-[#00ff88] focus:outline-none transition-colors text-sm text-white"
                      disabled={txPending}
                    >
                      <option value="3600">1 Hour</option>
                      <option value="86400">1 Day</option>
                      <option value="604800">1 Week</option>
                      <option value="2592000">30 Days</option>
                    </select>
                  </div>
                  
                  <button 
                    type="submit"
                    disabled={loading || txPending || !description.trim()}
                    className="w-full bg-[#00ff88] hover:bg-[#00cc6a] disabled:bg-[#333333] disabled:text-[#666666] text-[#0a0a0a] font-semibold py-2.5 rounded-lg transition-all disabled:cursor-not-allowed text-sm"
                  >
                    {txPending ? (
                      <span className="flex items-center justify-center gap-2">
                        <svg className="animate-spin h-4 w-4" viewBox="0 0 24 24">
                          <circle className="opacity-25" cx="12" cy="12" r="10" stroke="currentColor" strokeWidth="4" fill="none"/>
                          <path className="opacity-75" fill="currentColor" d="M4 12a8 8 0 018-8V0C5.373 0 0 5.373 0 12h4z"/>
                        </svg>
                        Creating...
                      </span>
                    ) : 'Create Proposal'}
                  </button>
                </form>
  
                {/* Stats */}
                <div className="mt-5 pt-5 border-t border-[#333333]">
                  <div className="flex justify-between text-xs mb-2">
                    <span className="text-[#a0a0a0]">Total Proposals</span>
                    <span className="text-[#00ff88] font-mono">{proposals.length}</span>
                  </div>
                  <div className="flex justify-between text-xs">
                    <span className="text-[#a0a0a0]">Active Proposals</span>
                    <span className="text-[#00ff88] font-mono">
                      {proposals.filter(p => Date.now() / 1000 < p.endTime).length}
                    </span>
                  </div>
                </div>
              </div>
            </div>
  
            {/* Proposals List */}
            <div className="lg:col-span-2">
              <h2 className="text-lg font-bold mb-4 flex items-center gap-2">
                <span className="text-[#00ff88]">📊</span> Active Proposals
              </h2>
              
              <div className="space-y-3 max-h-[600px] overflow-y-auto pr-2">
                {loading && proposals.length === 0 ? (
                  <div className="text-center py-8 text-[#a0a0a0]">
                    <div className="animate-pulse">Loading proposals...</div>
                  </div>
                ) : proposals.length === 0 ? (
                  <div className="bg-[#252525] border border-[#333333] rounded-xl p-8 text-center">
                    <p className="text-[#a0a0a0] mb-2">No proposals yet</p>
                    <p className="text-xs text-[#666666]">Be the first to create a proposal!</p>
                  </div>
                ) : (
                  proposals.map((proposal) => {
                    const isActive = Date.now() / 1000 < proposal.endTime
                    const votePercentage = proposal.voteCount > 0 ? Math.min((proposal.voteCount / 10) * 100, 100) : 0
                    
                    return (
                      <div key={proposal.id} className="bg-[#252525] border border-[#333333] rounded-xl p-4">
                        <div className="flex justify-between items-start mb-3">
                          <div className="flex-1">
                            <h3 className="text-base font-semibold mb-1">
                              {proposal.description}
                            </h3>
                            <div className="flex items-center gap-3 text-xs text-[#a0a0a0]">
                              <span>Proposal #{proposal.id}</span>
                              <span className={isActive ? 'text-[#00ff88]' : 'text-[#ff4444]'}>
                                {formatTimeRemaining(proposal.endTime)}
                              </span>
                            </div>
                          </div>
                          
                          <div className="text-right ml-4">
                            <div className="text-xl font-bold text-[#00ff88]">
                              {proposal.voteCount}
                            </div>
                            <div className="text-xs text-[#a0a0a0]">votes</div>
                          </div>
                        </div>
                        
                        {/* Vote Progress Bar */}
                        <div className="mb-3">
                          <div className="h-1.5 bg-[#1a1a1a] rounded-full overflow-hidden">
                            <div 
                              className="h-full bg-gradient-to-r from-[#00ff88] to-[#00cc6a] transition-all duration-500"
                              style={{ width: `${votePercentage}%` }}
                            />
                          </div>
                        </div>
                        
                        <button
                          onClick={() => handleVote(proposal.id)}
                          disabled={!isActive || proposal.hasVoted || loading || txPending}
                          className={`w-full py-2 rounded-lg font-medium transition-all text-sm ${
                            proposal.hasVoted 
                              ? 'bg-[#1a1a1a] text-[#666666] cursor-not-allowed' 
                              : isActive
                                ? 'bg-[#00ff88] hover:bg-[#00cc6a] text-[#0a0a0a]'
                                : 'bg-[#1a1a1a] text-[#666666] cursor-not-allowed'
                          }`}
                        >
                          {proposal.hasVoted ? '✓ Already Voted' : 
                           !isActive ? 'Voting Ended' : 
                           txPending ? 'Processing...' : 'Vote'}
                        </button>
                      </div>
                    )
                  })
                )}
              </div>
            </div>
          </div>
        ) : (
          /* Not Connected State */
          <div className="max-w-xl mx-auto text-center py-16">
            <div className="bg-[#252525] border border-[#333333] rounded-xl p-10">
              <div className="w-16 h-16 bg-[#00ff88] rounded-full flex items-center justify-center mx-auto mb-5">
                <span className="text-[#0a0a0a] text-3xl">🗳️</span>
              </div>
              <h2 className="text-2xl font-bold mb-3">Welcome to Pod Voting</h2>
              <p className="text-[#a0a0a0] mb-6 text-sm">
                Connect your wallet to create and vote on proposals using Pod Network&apos;s fast, low-cost infrastructure.
              </p>
              <button 
                onClick={connectWallet}
                className="bg-[#00ff88] hover:bg-[#00cc6a] text-[#0a0a0a] font-semibold py-2.5 px-6 rounded-lg transition-all"
              >
                Connect Wallet to Continue
              </button>
              
              <div className="grid grid-cols-3 gap-4 mt-10 pt-8 border-t border-[#333333]">
                <div>
                  <div className="text-xl font-bold text-[#00ff88]">&lt;1s</div>
                  <div className="text-xs text-[#a0a0a0]">TX Speed</div>
                </div>
                <div>
                  <div className="text-xl font-bold text-[#00ff88]">~$0.001</div>
                  <div className="text-xs text-[#a0a0a0]">Gas Cost</div>
                </div>
                <div>
                  <div className="text-xl font-bold text-[#00ff88]">100%</div>
                  <div className="text-xs text-[#a0a0a0]">Decentralized</div>
                </div>
              </div>
            </div>
          </div>
        )}
      </main>
  
      {/* Footer */}
      <footer className="mt-auto border-t border-[#333333] py-6">
        <div className="container max-w-7xl mx-auto px-6 text-center text-xs text-[#a0a0a0]">
          <p className="mb-1">
            Built on <a href="https://pod.network" target="_blank" rel="noopener noreferrer" className="text-[#00ff88] hover:underline">Pod Network</a> • 
            <a href="https://github.com/josephtran/pod-voting-tutorial" target="_blank" rel="noopener noreferrer" className="text-[#00ff88] hover:underline ml-2">View Tutorial</a> • 
            <a href="https://docs.v1.pod.network" target="_blank" rel="noopener noreferrer" className="text-[#00ff88] hover:underline ml-2">Docs</a>
          </p>
          <p className="text-[#666666]">
            Pod Network DevNet • Fast Finality • Order-Independent Design
          </p>
        </div>
      </footer>
  
      <style jsx>{`
        @keyframes slide-in {
          from {
            transform: translateX(100%);
            opacity: 0;
          }
          to {
            transform: translateX(0);
            opacity: 1;
          }
        }
        .animate-slide-in {
          animation: slide-in 0.3s ease-out;
        }
        /* Custom scrollbar */
        .overflow-y-auto::-webkit-scrollbar {
          width: 6px;
        }
        .overflow-y-auto::-webkit-scrollbar-track {
          background: #1a1a1a;
          border-radius: 3px;
        }
        .overflow-y-auto::-webkit-scrollbar-thumb {
          background: #333333;
          border-radius: 3px;
        }
        .overflow-y-auto::-webkit-scrollbar-thumb:hover {
          background: #00ff88;
        }
      `}</style>
    </div>
  )
}

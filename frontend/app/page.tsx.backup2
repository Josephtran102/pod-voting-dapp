// app/page.tsx
'use client'
import { useState } from 'react'
import { useContract } from '../hooks/useContract'

export default function VotingDapp() {
  const { proposals, createProposal, vote, loading, connectWallet } = useContract()
  const [description, setDescription] = useState('')
  const [duration, setDuration] = useState('3600')

  const handleCreateProposal = async (e: React.FormEvent) => {
    e.preventDefault()
    if (!description) return
    
    try {
      await createProposal(description, parseInt(duration))
      setDescription('')
      alert('Proposal created successfully!')
    } catch (error) {
      console.error('Failed to create proposal:', error)
      alert('Failed to create proposal')
    }
  }

  const handleVote = async (proposalId: number) => {
    try {
      await vote(proposalId)
      alert('Vote submitted successfully!')
    } catch (error) {
      console.error('Failed to vote:', error)
      alert('Failed to vote')
    }
  }

  return (
    <div className="container mx-auto p-8 max-w-4xl">
      <h1 className="text-4xl font-bold mb-8 text-center">Pod Voting dApp</h1>
      
      {/* Connect Wallet */}
      <div className="text-center mb-8">
        <button 
          onClick={connectWallet}
          className="bg-blue-500 hover:bg-blue-700 text-white font-bold py-2 px-4 rounded"
        >
          Connect Wallet
        </button>
      </div>

      {/* Create Proposal */}
      <div className="bg-gray-100 p-6 rounded-lg mb-8">
        <h2 className="text-2xl font-bold mb-4">Create New Proposal</h2>
        <form onSubmit={handleCreateProposal} className="space-y-4">
          <input
            type="text"
            placeholder="Proposal description..."
            value={description}
            onChange={(e) => setDescription(e.target.value)}
            className="w-full p-2 border rounded"
            required
          />
          <select 
            value={duration} 
            onChange={(e) => setDuration(e.target.value)}
            className="w-full p-2 border rounded"
          >
            <option value="3600">1 Hour</option>
            <option value="86400">1 Day</option>
            <option value="604800">1 Week</option>
          </select>
          <button 
            type="submit"
            disabled={loading}
            className="bg-green-500 hover:bg-green-700 text-white font-bold py-2 px-4 rounded w-full disabled:opacity-50"
          >
            {loading ? 'Creating...' : 'Create Proposal'}
          </button>
        </form>
      </div>

      {/* Proposals List */}
      <div>
        <h2 className="text-2xl font-bold mb-4">Active Proposals</h2>
        {loading ? (
          <p>Loading proposals...</p>
        ) : proposals.length === 0 ? (
          <p>No proposals yet. Create the first one!</p>
        ) : (
          <div className="space-y-4">
            {proposals.map((proposal) => (
              <div key={proposal.id} className="bg-white p-6 rounded-lg shadow">
                <h3 className="text-xl font-semibold mb-2">{proposal.description}</h3>
                <p className="text-gray-600 mb-4">Votes: {proposal.voteCount}</p>
                <button
                  onClick={() => handleVote(proposal.id)}
                  disabled={proposal.hasVoted || loading}
                  className="bg-blue-500 hover:bg-blue-700 text-white font-bold py-2 px-4 rounded disabled:opacity-50"
                >
                  {proposal.hasVoted ? 'Already Voted' : 'Vote'}
                </button>
              </div>
            ))}
          </div>
        )}
      </div>
    </div>
  )
}
